module ClusterId
  VERSION: String
  BYTE_SIZE: 16

  class Error < StandardError
  end

  class InvalidByteLengthError < Error
    def initialize: (Integer) -> void
  end

  class InvalidVersionError < Error
    def initialize: (Integer, Integer) -> void
  end

  module V1
    FORMAT_VERSION: 1

    class Deserializer[D, E, T]
      def to_data_centre: (Integer) -> D
      def to_environment: (Integer) -> E
      def to_type_id: (Integer) -> T
    end

    class Serializer[D, E, T]
      def from_data_centre: (D) -> Integer
      def from_environment: (E) -> Integer
      def from_type_id: (T) -> Integer
    end

    interface _ByteSource
      def bytes: (Integer) -> String
    end

    interface _Clock
      def now_ms: () -> Integer
    end

    class Value[D, E, T]
      attr_reader bytes: String
      def datetime: () -> DateTime
      def nonce: () -> Integer
      def version: () -> Integer
      def environment: () -> E
      def data_centre: () -> D
      def type_id: () -> T

      def initialize: (String, Deserializer[D, E, T]) -> void
    end

    class Generator[D, E, T]
      def generate: (data_centre: D, environment: E, type_id: T) -> Value[D, E, T]

      def initialize: (Serializer[D, E, T], Deserializer[D, E, T], _ByteSource?, _Clock?) -> void
    end

    class Clock
      include _Clock
    end

    class NullSerializer < Serializer[top, top, top]
    end

    class NullDeserializer < Deserializer[nil, nil, nil]
    end
  end
end
